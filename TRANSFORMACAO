pip install psycopg2
pip install streamlit 
import pandas as pd
import re 
import os
from datetime import datetime
import time
import psycopg2
import streamlit as st
CONEXÃO BD
# Parâmetros de conexão
host = "localhost"  # ou o endereço do servidor onde o PostgreSQL está rodando
port = "5432"  # Porta padrão do PostgreSQL
dbname = "TesteV1"  # Nome do banco de dados que você deseja acessar
user = "postgres"  # Nome de usuário do banco de dados
password = "brenda"  # Senha do banco de dados

try:
    # Estabelecendo a conexão
    conn = psycopg2.connect(
        host=host,
        port=port,
        dbname=dbname,
        user=user,
        password= password,
        options="-c client_encoding=UTF8"
    )

    # Criando um cursor para executar comandos SQL
    cur = conn.cursor()

    # Exemplo de execução de uma query
    cur.execute("SELECT version();")

    # Recuperando os resultados
    db_version = cur.fetchone()
    print(f"Versão do PostgreSQL: {db_version}")


except Exception as e:
    print(f"Ocorreu um erro ao conectar ao PostgreSQL: {e}")
chunk = pd.read_csv(r'C:\IC2024\Mortalidade_Geral_2023.csv', delimiter=';')
def tratar_dados(valor):
    if pd.isna(valor):  # Substituir valores nulos por "inexistente"
        return 'inexistente'
    valor = str(valor).strip().lower()  # Converter para minúsculas e remover espaços em branco
    valor = re.sub(r'[^a-z0-9;,-.\s]', '', valor)  # Remover caracteres fora do esperado
    valor = re.sub(r'\.0$', '', valor)
    return valor


#  ORIGEM
def tratar_origem(origem):
    if pd.isna(origem) or origem == '9':
        return 'ignorado'
    
    origem_dict = {
        '1': 'oracle',
        '2': 'banco estadual disponibilizado via ftp',
        '3': 'banco seade',
        '9': 'ignorado'
    }
    
    return origem_dict.get(str(origem), 'inexistente')

#  TIPOBITO
def tratar_tipobito(tipobito):
    if pd.isna(tipobito):
        return 'inexistente'
    
    tipobito_dict = {
        '1': 'fetal',
        '2': 'não fetal'
    }

    return tipobito_dict.get(str(tipobito), 'inexistente')

#DTOBITO
def tratar_dtobito(data):
    if pd.isna(data):
        return 'Data não informada'
    
   
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
       
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]

        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#HORAOBITO
def tratar_horaobito(hora):
    
    if len(hora) == 3:
        hora = '0' + hora
    elif len(hora) != 4:
        return "Formato inválido"
    return f"{hora[:2]}:{hora[2:]}"

#DTNASC
def formatar_data(data):
   
    if pd.isna(data):
        return 'Data não informada'
    

    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
   
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#IDADE
def tratar_idade(idade):
    if pd.isna(idade):  
        return 'inexistente'
    
    idade = str(idade).strip()
    
    if len(idade) != 3 or not idade.isdigit():
        return 'idade inválida'
    
    unidade = int(idade[0])  
    quantidade = int(idade[1:])  
    
    if unidade == 1:  # Minutos
        return f"{quantidade} minuto(s)"
    elif unidade == 2:  # Horas
        return f"{quantidade} hora(s)"
    elif unidade == 3:  # Dias
        return f"{quantidade} dia(s)"
    elif unidade == 4:  # Meses
        return f"{quantidade} mês(es)"
    elif unidade == 5:  # Anos
        return f"{quantidade} ano(s)"
    elif unidade == 9:  # Ignorado
        return 'idade ignorada'
    else:
        return 'unidade inválida'
    


#SEXO
def tratar_sexo(sexo):
    # Verificar se 1 e 2 estão corretos 

    if sexo == '1':
        return 'Masculino'
    elif sexo == '2':
        return 'Feminino'
    elif sexo == '3':
        return 'Ignorado'
    else:
        return 'Sexo inválido'


#RACACOR
def tratar_racacor(cor):

    cores = {
        '1': 'Branca',
        '2': 'Preta',
        '3': 'Amarela',
        '4': 'Parda',
        '5': 'Indígena'
    }

    return cores.get(cor, 'Cor inválida')


#ESTCIV
def tratar_estciv(situacao):
    situacao = str(situacao).strip() 
    
    situacoes = {
        '1': 'Solteiro',
        '2': 'Casado',
        '3': 'Viúvo',
        '4': 'Separado judicialmente/Divorciado',
        '5': 'União estável',
        '9': 'Ignorado'
    }

    return situacoes.get(situacao, 'Situação conjugal inválida')

#ESC

def tratar_esc(escolaridade):
     

    escolaridades = {
        '1': 'Nenhuma',
        '2': 'De 1 a 3 anos',
        '3': 'De 4 a 7 anos',
        '4': 'De 8 a 11 anos',
        '5': '12 anos e mais',
        '9': 'Ignorado'
    }

    return escolaridades.get(escolaridade, 'Escolaridade inválida')

#ESCMAE
def tratar_escmae(codigo):
    escmae_map = {
        '1': 'Nenhuma',
        '2': 'de 1 a 3 anos',
        '3': 'de 4 a 7 anos',
        '4': 'de 8 a 11 anos',
        '5': '12 anos e mais',
        '9': 'Ignorado'
    }


    return escmae_map.get(codigo, 'Código de escolaridade inválido')



#ESC2010
def tratar_esc2010(escolaridade):

    escolaridades = {
        '0': 'Sem escolaridade',
        '1': 'Fundamental I (1ª a 4ª série)',
        '2': 'Fundamental II (5ª a 8ª série)',
        '3': 'Médio (antigo 2º Grau)',
        '4': 'Superior incompleto',
        '5': 'Superior completo',
        '9': 'Ignorado'
    }

    return escolaridades.get(escolaridade, 'Escolaridade inválida')



#LOCOCOR
def tratar_lococor(codigo):
   
    lococor_map = {
        '1': 'hospital',
        '2': 'outros estabelecimentos de saúde',
        '3': 'domicílio',
        '4': 'via pública',
        '5': 'outros',
        '6': 'aldeia indígena',
        '9': 'ignorado'
    }

    return lococor_map.get(codigo, 'Local de ocorrência inválido')


#SERIESCFAL
def tratar_seriescfal(serie):
   
    series = {
        '1': '1ª série',
        '2': '2ª série',
        '3': '3ª série',
        '4': '4ª série',
        '5': '5ª série',
        '6': '6ª série',
        '7': '7ª série',
        '8': '8ª série'
    }

    return series.get(serie, 'Série inválida')

#ESCMAE2010
def tratar_escmae2010(codigo):
  
    escmae_map = {
        '0': 'Sem escolaridade',
        '1': 'Fundamental I (1ª A 4ª série)',
        '2': 'Fundamental II (5ª A 8ª série)',
        '3': 'Médio (antigo 2º grau)',
        '4': 'Superior incompleto',
        '5': 'Superior completo',
        '9':'Ignorado'
    }

    return escmae_map.get(codigo, 'Código de escolaridade inválido')

#QTchunkILVIVO
def tratar_qtchunkilvivo(qtchunkilhos):
    # Dicionário de mapeamento dos códigos para descrições de escolaridade
    if qtchunkilhos == '9':
        return 'Ignorado'
    
    # Retornar a descrição correspondente ou uma mensagem de erro se o código não for válido
    return qtchunkilhos

#QTchunkILMORT
def tratar_qtchunkilmort(qtchunkilhos):
   
    if qtchunkilhos == '9':
        return 'Ignorado'
    
    return qtchunkilhos

#GRAVIDEZ
def tratar_gravidez(tipogravidez):
    # Dicionário de mapeamento dos códigos para descrições de escolaridade
    gravidez = {
        '1':'única',
        '2':'dupla',
        '3':'tripla e mais',
        '9':'ignorada'
    }
    
    # Retornar a descrição correspondente ou uma mensagem de erro se o código não for válido
    return gravidez.get(tipogravidez, 'Tipo inválido')


#SEMANAGESTAC
def tratar_semagestac(codigo):

    if pd.isna(codigo) or codigo == '9':
        return 'Informação ignorada'

    
    if codigo.isdigit() and len(codigo) == 2:
        return codigo
    else:
        return 'Código de semanas de gestação inválido'
    

#GESTACAO
def tratar_gestacao(codigo):
  
    gestacao_map = {
        '1': 'Menos de 22 semanas',
        '2': '22 a 27 semanas',
        '3': '28 a 31 semanas',
        '4': '32 a 36 semanas',
        '5': '37 a 41 semanas',
        '6': '42 e + semanas'
    }
    
   
    if pd.isna(codigo):
        return 'Código não informado'

    return gestacao_map.get(codigo, 'Faixa de semanas de gestação inválida')


#PARTO
def tratar_parto(codigo):

    parto_map = {
        '1': 'vaginal',
        '2': 'cesáreo',
        '9': 'ignorado'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    
    return parto_map.get(codigo, 'Tipo de parto inválido')


#OBITOPARTO
def tratar_obitoparto(codigo):
    
    obitoparto_map = {
        '1': 'antes',
        '2': 'durante',
        '3': 'depois',
        '9': 'ignorado'
    }
    
    
    if pd.isna(codigo):
        return 'Código não informado'

    return obitoparto_map.get(codigo, 'Momento do óbito inválido')

#PESO
def tratar_peso(peso):
    if pd.isna(peso):
        return 'Peso não informado'


    if peso.isdigit() and len(peso) == 4:
        return peso
    else:
        return 'Peso inválido'

#TPMORTEOCO
def tratar_tpmorteoco(codigo):
   
    tpmorteoco_map = {
        '1': 'na gravidez',
        '2': 'no parto',
        '3': 'no abortamento',
        '4': 'até 42 dias após o término do parto',
        '5': 'de 43 dias a 1 ano após o término da gestação',
        '8': 'não ocorreu nestes períodos',
        '9': 'ignorado'
    }
    
   
    if pd.isna(codigo):
        return 'Código não informado'
    
    return tpmorteoco_map.get(codigo, 'Situação de óbito inválida')

#OBITOGRAV
def tratar_obitograv(codigo):

    obitograv_map = {
        '1': 'sim',
        '2': 'não',
        '9': 'ignorado'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    

    return obitograv_map.get(codigo, 'Código de óbito na gravidez inválido')



#OBITOPUER

def tratar_obitopuerp(codigo):

    obitopuerg_map = {
        '1': 'Sim, até 42 dias após o parto',
        '2': 'Sim, de 43 dias a 1 ano',
        '3': 'Não',
        '9': 'Ignorado'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'

    
 
    return obitopuerg_map.get(codigo, 'Código de óbito no puerpério inválido')




#ASSISTMED
def tratar_assistmed(codigo):

    assistmed_map = {
        '1': 'Sim',
        '2': 'Não',
        '9': 'Ignorado'
    }
    

    if pd.isna(codigo):
        return 'Código não informado'

    
    return assistmed_map.get(codigo, 'Código de assistência médica inválido')

#EXAME

def tratar_exame(codigo):
    exame_map = {
        '1': 'Sim',
        '2': 'Não',
        '9': 'Ignorado'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    

    return exame_map.get(codigo, 'Código de exame inválido')



#CIRURGIA
def tratar_cirurgia(codigo):
    
    cirurgia_map = {
        '1': 'Sim',
        '2': 'Não',
        '9': 'Ignorado'
    }
    
   
    if pd.isna(codigo):
        return 'Código não informado'
      
    return cirurgia_map.get(codigo, 'Código de cirurgia inválido')


#NECROPSIA
def tratar_necropsia(codigo):
    
    necropsia_map = {
        '1': 'Sim',
        '2': 'Não',
        '9': 'Ignorado'
    }
    
    
    if pd.isna(codigo):
        return 'Código não informado'

    return necropsia_map.get(codigo, 'Código de necropsia inválido')

#DTATESTADO
def tratar_dtatestado(data):
 
    if pd.isna(data):
        return 'Data não informada'
  
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
    
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]

        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'


#DTNASC
def converter_data(numero):
    try:
    
        numero_str = str(int(numero)).zfill(8)
        
       
        if len(numero_str) != 8:
            return 'Data Inválida'
              
        data = datetime.strptime(numero_str, '%d%m%Y')
        return data.strftime('%d/%m/%Y')
    except ValueError:
        
        return 'Data Inválida'
    

#CIRCOBITO
def tratar_circorbito(codigo):

    circorbito_map = {
        '1': 'acidente',
        '2': 'suicídio',
        '3': 'homicídio',
        '4': 'outros',
        '9': 'ignorado'
    }
    

    if pd.isna(codigo):
        return 'Código não informado'
    return circorbito_map.get(str(codigo), 'Tipo de morte inválido')

#ACIDTRAB
def tratar_acidtrab(codigo):
  
    acidtrab_map = {
        '1': 'sim',
        '2': 'não',
        '9': 'ignorado'
    }
    
 
    if pd.isna(codigo):
        return 'Código não informado'
    
    return acidtrab_map.get(str(codigo), 'Tipo de relação inválido')

#FONTE
def tratar_fonte(codigo):
    fonte_map = {
        '1': 'ocorrência policial',
        '2': 'hospital',
        '3': 'família',
        '4': 'outra',
        '9': 'ignorado'
    }
    
  
    if pd.isna(codigo):
        return 'Código não informado'

    return fonte_map.get(str(codigo), 'Fonte inválida')

#TPPOS
def tratar_tppos(codigo):
    tppos_map = {
        '1': 'sim',
        '2': 'não'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'

    return tppos_map.get(str(codigo), 'Tipo de investigação inválido')

#DTINVESTIG

def converter_data_investig(data):

    if pd.isna(data):
        return 'Data não informada'
    

    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
    
        if len(data) == 7:
       
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
         
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
      
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'


#DTCADASTRO
def converter_data_cadastro(data):
    if pd.isna(data):
        return 'Data não informada'
    
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#ATESTANTE

def tratar_atestante(codigo):

    atestante_map = {
        '1': 'Sim',
        '2': 'Substituto',
        '3': 'IML',
        '4': 'SVO',
        '5': 'Outros'
    }
    

    if pd.isna(codigo):
        return 'Código não informado'
    
    
    return atestante_map.get(str(codigo), 'Tipo de atendimento inválido')


#STCODIFICA
def tratar_stcodifica(status):
    stcodifica_map = {
        'S': 'Codificadora',
        'N': 'Não Codificadora'
    }
    
   
    if pd.isna(status):
        return 'Status não informado'

    return stcodifica_map.get(status.upper(), 'Status inválido')


#CODIFICADO
def tratar_codificado(codificado):
   
    codificado_map = {
        's': 'Codificado',
        'n': 'Não Codificado'
    }
    
 
    if pd.isna(codificado):
        return 'Status não informado'
    
    return codificado_map.get(codificado, 'Valor inválido')

#FONTEINV
def tratar_fonte_investigacao(codigo):
  
    fonteinv_map = {
        '1': 'Comitê de Morte Materna e/ou Infantil',
        '2': 'Visita domiciliar / Entrevista família',
        '3': 'Estabelecimento de Saúde / Prontuário',
        '4': 'Relacionado com outros bancos de dados',
        '5': 'S V O',
        '6': 'I M L',
        '7': 'Outra fonte',
        '8': 'Múltiplas fontes',
        '9': 'Ignorado'
    }
    
   
    if pd.isna(codigo):
        return 'Fonte não informada'
    
    return fonteinv_map.get(str(codigo), 'Código de fonte inválido')

    
#DTRECEBIM
def converter_data_recebimento(data):
    if pd.isna(data):
        return 'Data não informada'
    
    
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
        # Normalizar a data para o formato dd/mm/aaaa
        if len(data) == 7:
            # Caso tenha 7 dígitos, assume-se que é no formato dmyyyy
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            # Caso tenha 8 dígitos, assume-se que é no formato ddmmyyyy
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'


#DTRECORIGA
def converter_data_original(data):

    if pd.isna(data):
        return 'Data não informada'
    

    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
    
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#ESCMAEAGR1
def tratar_escolaridade_mae(codigo):
    escolaridade_map = {
        '0': 'Sem Escolaridade',
        '1': 'Fundamental I Incompleto',
        '2': 'Fundamental I Completo',
        '3': 'Fundamental II Incompleto',
        '4': 'Fundamental II Completo',
        '5': 'Ensino Médio Incompleto',
        '6': 'Ensino Médio Completo',
        '7': 'Superior Incompleto',
        '8': 'Superior Completo',
        '9': 'Ignorado',
        '10': 'Fundamental I Incompleto ou Inespecífico',
        '11': 'Fundamental II Incompleto ou Inespecífico',
        '12': 'Ensino Médio Incompleto ou Inespecífico'
    }
    
 
    if pd.isna(codigo):
        return 'Código não informado'
    
    return escolaridade_map.get(codigo, 'Escolaridade inválida')


#ESCFALAGR1
def tratar_escolaridade_falecido(codigo):
    escolaridade_map = {
        '0': 'Sem Escolaridade',
        '1': 'Fundamental I Incompleto',
        '2': 'Fundamental I Completo',
        '3': 'Fundamental II Incompleto',
        '4': 'Fundamental II Completo',
        '5': 'Ensino Médio Incompleto',
        '6': 'Ensino Médio Completo',
        '7': 'Superior Incompleto',
        '8': 'Superior Completo',
        '9': 'Ignorado',
        '10': 'Fundamental I Incompleto ou Inespecífico',
        '11': 'Fundamental II Incompleto ou Inespecífico',
        '12': 'Ensino Médio Incompleto ou Inespecífico'
    }
    
  
    if pd.isna(codigo):
        return 'Código não informado'
    
    return escolaridade_map.get(codigo, 'Escolaridade inválida')

#DTCADINV
def converter_data_cadastro(data):
    if pd.isna(data):
        return 'Data não informada'
    
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]

        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#DPOBITOCOR
def tratar_tpobitocor(codigo):
    tpobitocor_map = {
        '1': 'Durante a gestação',
        '2': 'Durante o abortamento',
        '3': 'Após o abortamento',
        '4': 'No parto ou até 1 hora após o parto',
        '5': 'No puerpério - até 42 dias após o parto',
        '6': 'Entre 43 dias e até 1 ano após o parto',
        '7': 'A investigação não identificou o momento do óbito',
        '8': 'Mais de um ano após o parto',
        '9': 'O óbito não ocorreu nas circunstâncias anteriores',
        '': 'Não investigado'  
    }
    
    if pd.isna(codigo) or codigo == '':
        return 'Não investigado'
    return tpobitocor_map.get(codigo, 'Momento da ocorrência inválido')
    
#DTCONINV
def tratar_dtconinv(data):
    if pd.isna(data):
        return 'Data não informada'
    
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'


#FONTES

def replace_all(text, replacements):
    if text != 'inexistente':
        for old, new in replacements.items():
            text = text.replace(old, new)
        return text
    else:
        return 'inexistente'

replacements = {
    "x": "Vazio ",
    "s": "Preenchido "
}

#TPRESGINFO
def tratar_presginfo(codigo):

    presginfo_map = {
        '1': 'Não acrescentou nem corrigiu informação',
        '2': 'Sim, permitiu o resgate de novas informações',
        '3': 'Sim, permitiu a correção de alguma das causas informadas originalmente'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    return presginfo_map.get(codigo, 'Código inválido')


#TPNIVELINV
def tratar_nivel_investigador(codigo):
    nivel_investigador_map = {
        'e': 'Estadual',
        'r': 'Regional',
        'm': 'Municipal'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    
    return nivel_investigador_map.get(codigo, 'Código inválido')


#DTCADINF
def tratar_dtcadinf(data):
    if pd.isna(data):
        return 'Data não informada'
    

    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():
       
        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        

        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'

#MORTEPARTO
def tratar_morte_parto(codigo):

    morte_parto_map = {
        '1': 'antes',
        '2': 'durante',
        '3': 'depois',
        '9': 'Ignorado'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    
    return morte_parto_map.get(codigo, 'Código inválido')




#DTCONCASO
def tratar_dtconcaso(data):
    if pd.isna(data):
        return 'Data não informada'
    
    data = str(data).strip()
    
    if len(data) in [7, 8] and data.isdigit():

        if len(data) == 7:
            dia = data[:1]
            mes = data[1:3]
            ano = data[3:]
        elif len(data) == 8:
            dia = data[:2]
            mes = data[2:4]
            ano = data[4:]
        
        dia = dia.zfill(2)
        mes = mes.zfill(2)
        
        return f'{dia}/{mes}/{ano}'
    else:
        return 'Data inválida'
    

#ALTCAUSA
def tratar_altcausa(codigo):
    altcausa_map = {
        '1': 'Sim',
        '2': 'Não'
    }
    
    if pd.isna(codigo):
        return 'Código não informado'
    
    return altcausa_map.get(codigo, 'Código inválido')


# FINAL DO TRATAMENTO ------------------------------------------------------------------------------







for coluna in chunk.columns:
    chunk[coluna] = chunk[coluna].apply(tratar_dados)
chunk['ORIGEM'] = chunk['ORIGEM'].apply(tratar_origem)
chunk['TIPOBITO'] = chunk['TIPOBITO'].apply(tratar_tipobito)  
chunk['DTOBITO'] = chunk['DTOBITO'].apply(tratar_dtobito)
chunk['HORAOBITO'] = chunk['HORAOBITO'].apply(tratar_horaobito)
chunk['DTNASC'] = chunk['DTNASC'].apply(formatar_data)
chunk['IDADE'] = chunk['IDADE'].apply(tratar_idade)
chunk['SEXO'] = chunk['SEXO'].apply(tratar_sexo)
chunk['RACACOR'] = chunk['RACACOR'].apply(tratar_racacor)
chunk['ESTCIV'] = chunk['ESTCIV'].apply(tratar_estciv)
chunk['ESC'] = chunk['ESC'].apply(tratar_esc)
chunk['ESCMAE'] = chunk['ESCMAE'].apply(tratar_escmae)
chunk['ESC2010'] = chunk['ESC2010'].apply(tratar_esc2010)
chunk['LOCOCOR'] = chunk['LOCOCOR'].apply(tratar_lococor)       
chunk['SERIESCFAL'] = chunk['SERIESCFAL'].apply(tratar_seriescfal)
chunk['ESCMAE2010'] = chunk['ESCMAE2010'].apply(tratar_escmae2010)
chunk['QTDFILVIVO'] = chunk['QTDFILVIVO'].apply(tratar_qtchunkilvivo) 
chunk['QTDFILMORT'] = chunk['QTDFILMORT'].apply(tratar_qtchunkilmort) 
chunk['GRAVIDEZ'] = chunk['GRAVIDEZ'].apply(tratar_gravidez)
chunk['SEMAGESTAC'] = chunk['SEMAGESTAC'].apply(tratar_semagestac)
chunk['GESTACAO'] = chunk['GESTACAO'].apply(tratar_gestacao)
chunk['PARTO'] = chunk['PARTO'].apply(tratar_parto)
chunk['OBITOPARTO'] = chunk['OBITOPARTO'].apply(tratar_obitoparto)
chunk['PESO'] = chunk['PESO'].apply(tratar_peso)
chunk['TPMORTEOCO'] = chunk['TPMORTEOCO'].apply(tratar_tpmorteoco)
chunk['OBITOGRAV'] = chunk['OBITOGRAV'].apply(tratar_obitograv)
chunk['OBITOPUERP'] = chunk['OBITOPUERP'].apply(tratar_obitopuerp)
chunk['ASSISTMED'] = chunk['ASSISTMED'].apply(tratar_assistmed)
chunk['EXAME'] = chunk['EXAME'].apply(tratar_exame)
chunk['CIRURGIA'] = chunk['CIRURGIA'].apply(tratar_cirurgia)
chunk['NECROPSIA'] = chunk['NECROPSIA'].apply(tratar_necropsia)
chunk['DTATESTADO'] = chunk['DTATESTADO'].apply(tratar_dtatestado)
chunk['DTNASC'] = chunk['DTNASC'].apply(converter_data)
chunk['CIRCOBITO'] = chunk['CIRCOBITO'].apply(tratar_circorbito)
chunk['ACIDTRAB'] = chunk['ACIDTRAB'].apply(tratar_acidtrab)
chunk['FONTE'] = chunk['FONTE'].apply(tratar_fonte)
chunk['TPPOS'] = chunk['TPPOS'].apply(tratar_tppos)
chunk['DTINVESTIG'] = chunk['DTINVESTIG'].apply(converter_data_investig)
chunk['DTCADASTRO'] = chunk['DTCADASTRO'].apply(converter_data_cadastro)
chunk['ATESTANTE'] = chunk['ATESTANTE'].apply(tratar_atestante)
chunk['STCODIFICA'] = chunk['STCODIFICA'].apply(tratar_stcodifica)
chunk['CODIFICADO'] = chunk['CODIFICADO'].apply(tratar_codificado)
chunk['FONTEINV'] = chunk['FONTEINV'].apply(tratar_fonte_investigacao)
chunk['DTRECEBIM'] = chunk['DTRECEBIM'].apply(converter_data_recebimento)
chunk['DTRECORIGA'] = chunk['DTRECORIGA'].apply(converter_data_original)
chunk['ESCMAEAGR1'] = chunk['ESCMAEAGR1'].apply(tratar_escolaridade_mae)
chunk['ESCFALAGR1'] = chunk['ESCFALAGR1'].apply(tratar_escolaridade_falecido)
chunk['DTCADINV'] = chunk['DTCADINV'].apply(converter_data_cadastro)
chunk['TPOBITOCOR'] = chunk['TPOBITOCOR'].apply(tratar_tpobitocor)
chunk['DTCONINV'] = chunk['DTCONINV'].apply(tratar_dtconinv)
chunk['FONTES'] = chunk['FONTES'].apply(lambda x: replace_all(x, replacements))
chunk['TPRESGINFO'] = chunk['TPRESGINFO'].apply(tratar_presginfo)
chunk['TPNIVELINV'] = chunk['TPNIVELINV'].apply(tratar_nivel_investigador)
chunk['DTCADINF'] = chunk['DTCADINF'].apply(tratar_dtcadinf)
chunk['MORTEPARTO'] = chunk['MORTEPARTO'].apply(tratar_morte_parto)
chunk['DTCONCASO'] = chunk['DTCONCASO'].apply(tratar_dtconcaso)
chunk['ALTCAUSA'] = chunk['ALTCAUSA'].apply(tratar_altcausa)
chunk.head(20)
# cur = conn.cursor()
#----- INSERIR NA TABELA PRINCIPAL
# # Loop sobre cada linha no chunk
for _, row in chunk.iterrows():
   
    query = '''
        INSERT INTO "RSIM2023" (
            "ORIGEM", "TIPOBITO", "DTOBITO", "HORAOBITO", "NATURAL", "CODMUNNATU",
            "DTNASC", "IDADE", "SEXO", "RACACOR", "ESTCIV", "ESC", "ESC2010", "SERIESCFAL",
            "OCUP", "CODMUNRES", "LOCOCOR", "CODESTAB", "CODMUNOCOR",
            "IDADEMAE", "ESCMAE", "ESCMAE2010", "SERIESCMAE", "OCUPMAE", "QTDFILVIVO",
            "QTDFILMORT", "GRAVIDEZ", "SEMAGESTAC", "GESTACAO", "PARTO", "OBITOPARTO",
            "PESO", "TPMORTEOCO", "OBITOGRAV", "OBITOPUERP", "ASSISTMED", "EXAME",
            "CIRURGIA", "NECROPSIA", "LINHAA", "LINHAB", "LINHAC", "LINHAD", "LINHAII",
            "CAUSABAS", "CB_PRE", "COMUNSVOIM", "DTATESTADO", "CIRCOBITO", "ACIDTRAB",
            "FONTE", "NUMEROLOTE", "TPPOS", "DTINVESTIG", "CAUSABAS_O", "DTCADASTRO",
            "ATESTANTE", "STCODIFICA", "CODIFICADO", "VERSAOSIST", "VERSAOSCB", "FONTEINV",
            "DTRECEBIM", "ATESTADO", "DTRECORIGA", "CAUSAMAT", "ESCMAEAGR1", "ESCFALAGR1",
            "STDOEPIDEM", "STDONOVA", "DIFDATA", "NUDIASOBCO", "DTCADINV",
            "TPOBITOCOR", "DTCONINV", "FONTES", "TPRESGINFO", "TPNIVELINV",
            "DTCADINF", "MORTEPARTO", "DTCONCASO", "ALTCAUSA", "CONTADOR" 
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s)
    '''

    data = tuple(row[col] for col in [
        'ORIGEM', 'TIPOBITO', 'DTOBITO', 'HORAOBITO', 'NATURAL', 'CODMUNNATU',
        'DTNASC', 'IDADE', 'SEXO', 'RACACOR', 'ESTCIV', 'ESC', 'ESC2010', 'SERIESCFAL',
        'OCUP', 'CODMUNRES', 'LOCOCOR', 'CODESTAB','CODMUNOCOR',
        'IDADEMAE', 'ESCMAE', 'ESCMAE2010', 'SERIESCMAE', 'OCUPMAE', 'QTDFILVIVO',
        'QTDFILMORT', 'GRAVIDEZ', 'SEMAGESTAC', 'GESTACAO', 'PARTO', 'OBITOPARTO',
        'PESO', 'TPMORTEOCO', 'OBITOGRAV', 'OBITOPUERP', 'ASSISTMED', 'EXAME',
        'CIRURGIA', 'NECROPSIA', 'LINHAA', 'LINHAB', 'LINHAC', 'LINHAD', 'LINHAII',
        'CAUSABAS', 'CB_PRE', 'COMUNSVOIM', 'DTATESTADO', 'CIRCOBITO', 'ACIDTRAB',
        'FONTE', 'NUMEROLOTE', 'TPPOS', 'DTINVESTIG', 'CAUSABAS_O', 'DTCADASTRO',
        'ATESTANTE', 'STCODIFICA', 'CODIFICADO', 'VERSAOSIST', 'VERSAOSCB', 'FONTEINV',
        'DTRECEBIM', 'ATESTADO', 'DTRECORIGA', 'CAUSAMAT', 'ESCMAEAGR1', 'ESCFALAGR1',
        'STDOEPIDEM', 'STDONOVA', 'DIFDATA', 'NUDIASOBCO','DTCADINV',
        'TPOBITOCOR', 'DTCONINV', 'FONTES', 'TPRESGINFO', 'TPNIVELINV', 
        'DTCADINF', 'MORTEPARTO', 'DTCONCASO','ALTCAUSA', 'contador'
    ])
    
    cur.execute(query, data)
    conn.commit()
    query2 = '''
            INSERT INTO "CircunstanciaObito" (
                "TIPOBITO", "OBITOGRAV", "CIRCOBITO", "ACIDTRAB", "OBITOPARTO",
                "TPMORTEOCO", "OBITOPUERP") VALUES (%s, %s, %s, %s, %s, %s, %s)
        '''
    data2= tuple(row[col] for col in [
        'TIPOBITO', 'OBITOGRAV', 'CIRCOBITO', 'ACIDTRAB', 'OBITOPARTO',
        'TPMORTEOCO', 'OBITOPUERP'
    ])
    cur.execute(query2, data2)
    conn.commit()
    query3 = '''
            INSERT INTO "FonteDado" (
                "ORIGEM", "FONTE", "VERSAOSIST", "VERSAOSCB", "FONTEINV",
                "FONTES", "CONTADOR"
            ) VALUES (%s, %s, %s, %s, %s, %s, %s)
        '''
    data3= tuple(row[col] for col in [
        'ORIGEM', 'FONTE', 'VERSAOSIST', 'VERSAOSCB', 'FONTEINV',
        'FONTES' ,'contador'
    ])
    cur.execute(query3, data3)
    conn.commit()
    
    
    query4= '''
            INSERT INTO "Datas" (
                "DTOBITO", "DTATESTADO", "DTINVESTIG", "DTRECEBIM", "DTCADINV",
                "DTCONINV", "DTCONCASO", "DTCADASTRO", "DTRECORIGA", "DIFDATA",
                "NUDIASOBCO",  "DTCADINF"
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        '''
    data4 = tuple(row[col] for col in [
'DTOBITO', 'DTATESTADO', 'DTINVESTIG', 'DTRECEBIM', 'DTCADINV',
                'DTCONINV', 'DTCONCASO', 'DTCADASTRO', 'DTRECORIGA', 'DIFDATA',
                'NUDIASOBCO',  'DTCADINF'
    ])

    cur.execute(query4, data4)
    conn.commit()



    query5 = '''
            INSERT INTO "InfoFalecido" (
                "NATURAL", "CODMUNNATU", "IDADE", "SEXO", "RACACOR", "ESTCIV",
                "OCUP", "PESO", "CODMUNRES"
            ) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s)
        '''
    data5= tuple(row[col] for col in [
        'NATURAL', 'CODMUNNATU', 'IDADE', 'SEXO', 'RACACOR', 'ESTCIV',
                'OCUP', 'PESO', 'CODMUNRES'
    ])
    cur.execute(query5, data5)
    conn.commit()





    query6 = '''
            INSERT INTO "EscolaridadeFalecido" (
                "ESC", "ESC2010", "SERIESCFAL", "ESCFALAGR1"
            ) VALUES (%s, %s, %s, %s)
        '''
    data6= tuple(row[col] for col in [
        'ESC', 'ESC2010', 'SERIESCFAL', 'ESCFALAGR1'
    ])
    cur.execute(query6, data6)
    conn.commit()





    query7 = '''
            INSERT INTO "CID" (
                "LINHAA", "LINHAB", "LINHAC", "LINHAD", "LINHAII",
                "CAUSABAS", "CB_PRE", "CAUSAMAT"
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        '''
    data7= tuple(row[col] for col in [
                'LINHAA', 'LINHAB', 'LINHAC', 'LINHAD', 'LINHAII',
                'CAUSABAS', 'CB_PRE', 'CAUSAMAT'
    ])
    cur.execute(query7, data7)
    conn.commit()




    query8 = '''
            INSERT INTO "InfoMae" (
                "IDADEMAE", "OCUPMAE", "QTFILVIVO", "QTFILMORT", "GRAVIDEZ",
                 "GESTACAO", "PARTO"
            ) VALUES (%s, %s, %s, %s, %s, %s, %s)
        '''
    data8= tuple(row[col] for col in [
                'IDADEMAE', 'OCUPMAE', 'QTDFILVIVO', 'QTDFILMORT', 'GRAVIDEZ',
                 'GESTACAO', 'PARTO'
    ])
    cur.execute(query8, data8)
    conn.commit()


    query9 = '''
            INSERT INTO "StatusDeCodificacao" (
                "STCODIFICA"
            ) VALUES (%s)
        '''
    data9= tuple(row[col] for col in [
        'STCODIFICA'
    ])
    cur.execute(query9, data9)
    conn.commit()


    query10 = '''
            INSERT INTO "CODIFICACAO" (
                "CODIFICADO"
            ) VALUES (%s)
        '''
    data10= tuple(row[col] for col in [
        'CODIFICADO'
    ])
    cur.execute(query10, data10)
    conn.commit()


    query11 = '''
            INSERT INTO "StatusInvestigacao" (
                "TPPOS", "ALTCAUSA"
            ) VALUES (%s, %s)
        '''
    data11= tuple(row[col] for col in [
        'TPPOS', 'ALTCAUSA'
    ])
    cur.execute(query11, data11)
    conn.commit()


    query12 = '''
            INSERT INTO "LocalObito" (
                "LOCOCOR", "CODESTAB", "CODMUNOCOR", "COMUNSVOIM"
            ) VALUES (%s, %s, %s, %s)
        '''
    data12= tuple(row[col] for col in [
        'LOCOCOR', 'CODESTAB', 'CODMUNOCOR', 'COMUNSVOIM'
    ])
    cur.execute(query12, data12)
    conn.commit()


    query13 = '''
            INSERT INTO "MomentoObito" (
                "OBITOPARTO", "TPMORTEOCO", "TPOBITOCOR", "MORTEPARTO"
            ) VALUES (%s, %s, %s, %s)
        '''
    data13= tuple(row[col] for col in [
        'OBITOPARTO', 'TPMORTEOCO', 'TPOBITOCOR', 'MORTEPARTO'
    ])
    cur.execute(query13, data13)
    conn.commit()

    query14 = '''
            INSERT INTO "StatusDO" (
                "STDOEPIDEM", "STDONOVA"
            ) VALUES (%s, %s)
        '''
    data14= tuple(row[col] for col in [
        'STDOEPIDEM', 'STDONOVA'
    ])
    cur.execute(query14, data14)
    conn.commit()

    query15 = '''
            INSERT INTO "Investigador" (
                "TPNIVELINV"
            ) VALUES (%s)
        '''
    data15= tuple(row[col] for col in [
            'TPNIVELINV'
    ])
    cur.execute(query15, data15)
    conn.commit()


    query16 = '''
            INSERT INTO "AtendimentoMedico" (
                "ASSISTMED", "ATESTANTE"
            ) VALUES (%s, %s)
        '''
    data16= tuple(row[col] for col in [
        'ASSISTMED', 'ATESTANTE'
    ])
    cur.execute(query16, data16)
    conn.commit()


    query17 = '''
            INSERT INTO "Investigacao" (
                "NECROPSIA", "EXAME", "ATESTADO", "TPRESGINFO", "CIRURGIA"
            ) VALUES (%s, %s, %s, %s, %s)
        '''
    data17= tuple(row[col] for col in [
        'NECROPSIA', 'EXAME', 'ATESTADO', 'TPRESGINFO', 'CIRURGIA'
    ])
    cur.execute(query17, data17)
    conn.commit()


    query18 = '''
            INSERT INTO "EscolaridadeMae" (
                "ESCMAE", "ESCMAE2010", "SERIESCMAE", "ESCMAEAGR1"
            ) VALUES (%s, %s, %s, %s)
        '''
    data18= tuple(row[col] for col in [
    'ESCMAE', 'ESCMAE2010', 'SERIESCMAE', 'ESCMAEAGR1'
    ])
    cur.execute(query18, data18)
    conn.commit()



    query19 = '''
            INSERT INTO "HoraObito" (
                "HORAOBITO"
            ) VALUES (%s)
        '''
    data19= tuple(row[col] for col in [
         'HORAOBITO'
    ])
    cur.execute(query19, data19)
    conn.commit()



#----- FIM INSERÇÃO NA TABELA PRINCIPAL

st.set_option('server.port', 8502)
aba1,aba2 = st.tabs(['Gráficos', 'Tabelas'])
aba1,aba2 = st.tabs(['Gráficos', 'Tabelas'])
st.title('ANÁLISE DOS DADOS DO SISTEMA  DE INFORMAÇÃO SOBRE  MORTALIDADE ')
st.run('C:\Users\brenda.lima\AppData\Roaming\Python\Python312\site-packages\ipykernel_launcher.py')
aba1,aba2 = st.tabs(['Gráficos', 'Tabelas'])
